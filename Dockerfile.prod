# GoREAL Project - Production Dockerfile
# Multi-stage build for optimized production image

# Build stage
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF

# Set environment variables for build
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . /app
WORKDIR /app

# Install the application
RUN pip install -e .

# Production stage
FROM python:3.11-slim as production

# Set build labels
LABEL maintainer="GoREAL Team <goreal@example.com>" \
      version="${VERSION}" \
      description="GoREAL - Roblox-integrated challenge management system" \
      build-date="${BUILD_DATE}" \
      vcs-ref="${VCS_REF}"

# Create non-root user for security
RUN groupadd -r goreal && useradd -r -g goreal -d /app -s /bin/bash goreal

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code
COPY --from=builder /app /app

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/tmp \
    && chown -R goreal:goreal /app

# Copy production configuration files
COPY docker/production/entrypoint.sh /entrypoint.sh
COPY docker/production/healthcheck.sh /healthcheck.sh
COPY docker/production/wait-for-it.sh /wait-for-it.sh

# Make scripts executable
RUN chmod +x /entrypoint.sh /healthcheck.sh /wait-for-it.sh

# Set environment variables
ENV PYTHONPATH=/app \
    FLASK_ENV=production \
    FLASK_DEBUG=0 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    WORKERS=4 \
    WORKER_CLASS=gevent \
    WORKER_CONNECTIONS=1000 \
    MAX_REQUESTS=1000 \
    MAX_REQUESTS_JITTER=100 \
    TIMEOUT=30 \
    KEEPALIVE=2 \
    PRELOAD=true

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /healthcheck.sh

# Switch to non-root user
USER goreal

# Expose port
EXPOSE 8000

# Use entrypoint script
ENTRYPOINT ["/usr/bin/dumb-init", "--", "/entrypoint.sh"]

# Default command
CMD ["gunicorn"]