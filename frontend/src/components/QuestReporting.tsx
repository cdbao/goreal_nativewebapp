import React, { useState } from 'react';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { collection, addDoc, serverTimestamp } from 'firebase/firestore';
import { useAuth } from '../contexts/AuthContext';
import { storage, db } from '../firebase';
import { Quest } from '../types';
import './QuestReporting.css';

interface QuestReportingProps {
  quest: Quest;
  onClose: () => void;
}

const QuestReporting: React.FC<QuestReportingProps> = ({ quest, onClose }) => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploading, setUploading] = useState(false);
  const [success, setSuccess] = useState(false);
  const { currentUser } = useAuth();

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const maxSize = 10 * 1024 * 1024; // 10MB
      if (file.size > maxSize) {
        alert('File qu√° l·ªõn! Vui l√≤ng ch·ªçn file d∆∞·ªõi 10MB.');
        return;
      }

      const allowedTypes = [
        'image/jpeg',
        'image/jpg',
        'image/png',
        'image/gif',
        'image/webp',
        'video/mp4',
        'video/webm',
        'video/quicktime',
        'video/avi',
        'video/mov',
      ];

      console.log('QuestReporting file validation:', {
        fileName: file.name,
        fileType: file.type,
        isValid: allowedTypes.includes(file.type),
      });

      if (!allowedTypes.includes(file.type)) {
        alert(
          `ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!\n\nFile hi·ªán t·∫°i: ${file.type}\nƒê·ªãnh d·∫°ng ƒë∆∞·ª£c h·ªó tr·ª£: ${allowedTypes.join(', ')}`
        );
        return;
      }

      setSelectedFile(file);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!selectedFile || !currentUser) {
      alert('Vui l√≤ng ch·ªçn file v√† ƒë·∫£m b·∫£o ƒë√£ ƒëƒÉng nh·∫≠p.');
      return;
    }

    setUploading(true);

    try {
      // Generate unique submission ID
      const submissionId = `${currentUser.uid}_${quest.questId}_${Date.now()}`;

      // Upload file to Firebase Storage
      const fileExtension = selectedFile.name.split('.').pop();
      const fileName = `submissions/${currentUser.uid}/${submissionId}.${fileExtension}`;
      const storageRef = ref(storage, fileName);

      const snapshot = await uploadBytes(storageRef, selectedFile);
      const downloadURL = await getDownloadURL(snapshot.ref);

      // Create submission document in Firestore
      await addDoc(collection(db, 'submissions'), {
        submissionId,
        userId: currentUser.uid,
        questId: quest.questId,
        proofData: downloadURL,
        proofType: 'image',
        status: 'pending',
        submittedAt: serverTimestamp(),
      });

      setSuccess(true);
      setTimeout(() => {
        onClose();
      }, 2000);
    } catch (error) {
      console.error('Error submitting quest report:', error);
      alert('C√≥ l·ªói x·∫£y ra khi g·ª≠i b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setUploading(false);
    }
  };

  if (success) {
    return (
      <div className="modal-overlay">
        <div className="reporting-modal">
          <div className="success-content">
            <div className="success-icon">‚úÖ</div>
            <h3>B√°o c√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!</h3>
            <p>H·ªôi ƒê·ªìng s·∫Ω xem x√©t v√† ph√™ duy·ªát b√°o c√°o c·ªßa b·∫°n s·ªõm nh·∫•t.</p>
            <div className="success-animation">üî• Ch·ªù nh·∫≠n AURA üî•</div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="modal-overlay">
      <div className="reporting-modal">
        <div className="modal-header">
          <h3>üî• B√°o c√°o r√®n luy·ªán</h3>
          <button onClick={onClose} className="close-button">
            ‚úï
          </button>
        </div>

        <div className="quest-info">
          <h4>{quest.title}</h4>
          <p>{quest.description}</p>
          <div className="reward-info">
            <span>Ph·∫ßn th∆∞·ªüng: +{quest.auraReward} AURA</span>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="reporting-form">
          <div className="upload-section">
            <label htmlFor="proof-file" className="upload-label">
              üì∏ T·∫£i l√™n b·∫±ng ch·ª©ng r√®n luy·ªán
            </label>

            <div className="upload-area">
              <input
                id="proof-file"
                type="file"
                accept="image/*,video/mp4,video/webm,video/quicktime,video/avi,video/mov"
                onChange={handleFileSelect}
                className="file-input"
                disabled={uploading}
              />

              {selectedFile ? (
                <div className="file-preview">
                  <div className="file-info">
                    <span className="file-name">üìÑ {selectedFile.name}</span>
                    <span className="file-size">
                      ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)
                    </span>
                  </div>

                  {selectedFile.type.startsWith('image/') && (
                    <img
                      src={URL.createObjectURL(selectedFile)}
                      alt="Preview"
                      className="image-preview"
                    />
                  )}
                </div>
              ) : (
                <div className="upload-placeholder">
                  <div className="upload-icon">üìÅ</div>
                  <p>Ch·ªçn ·∫£nh ho·∫∑c video ng·∫Øn</p>
                  <small>T·ªëi ƒëa 10MB ‚Ä¢ JPG, PNG, GIF, MP4, MOV</small>
                </div>
              )}
            </div>
          </div>

          <div className="form-actions">
            <button
              type="button"
              onClick={onClose}
              className="cancel-button"
              disabled={uploading}
            >
              H·ªßy
            </button>

            <button
              type="submit"
              className="submit-button"
              disabled={!selectedFile || uploading}
            >
              {uploading ? (
                <>
                  <span className="spinner"></span>
                  ƒêang g·ª≠i...
                </>
              ) : (
                'üî• G·ª≠i b√°o c√°o'
              )}
            </button>
          </div>
        </form>

        <div className="reporting-tips">
          <h5>üí° M·∫πo b√°o c√°o hi·ªáu qu·∫£:</h5>
          <ul>
            <li>Ch·ª•p ·∫£nh r√µ n√©t, c√≥ √°nh s√°ng t·ªët</li>
            <li>Th·ªÉ hi·ªán r√µ qu√° tr√¨nh th·ª±c hi·ªán nhi·ªám v·ª•</li>
            <li>Video ng·∫Øn (d∆∞·ªõi 1 ph√∫t) s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n x√©t duy·ªát</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default QuestReporting;
