rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document, admins can read all user documents
    match /users/{userId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == userId ||
                   (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
      allow write: if request.auth != null && 
                   (request.auth.uid == userId ||
                    (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
    }

    // Users can only read quests from their guild, admins can read/write all
    match /quests/{questId} {
      allow read: if request.auth != null && 
                  (// Admin can read all quests
                   (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
                   // Users can only read quests from their guild
                   (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.guild != null &&
                    resource.data.guild == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.guild) ||
                   // Allow reading if quest has no guild restriction (public quests)
                   (!('guild' in resource.data) || resource.data.guild == null));
      allow write: if request.auth != null && 
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can create their own submissions, admins can read/write all
    match /submissions/{submissionId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update: if request.auth != null && 
                          (request.auth.uid == resource.data.userId || 
                           (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
    }

    // Background images - only admins can read/write
    match /backgrounds/{backgroundId} {
      allow read, write: if request.auth != null && 
                         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Top-level notifications - users can read their own notifications, admins can read/write all
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
                  (resource.data.userId == request.auth.uid ||
                   (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
      allow create, update: if request.auth != null && 
                            (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow list: if request.auth != null;
    }

    // App configuration - admins can read/write, users can read
    match /config/{configId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User subcollections - properly nested within users document
    match /users/{userId} {
      // User notifications - users can read/write their own notifications, admins can read all
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && 
                          (request.auth.uid == userId ||
                           (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
        allow list: if request.auth != null && 
                   (request.auth.uid == userId ||
                    (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
      }
      
      // User active quests - users can read/write their own active quests, admins can read all
      match /activeQuests/{questId} {
        allow read, write: if request.auth != null && 
                          (request.auth.uid == userId ||
                           (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
        allow list: if request.auth != null && 
                   (request.auth.uid == userId ||
                    (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
      }
    }

    // Guild Chat System - only guild members can access their guild chat
    match /guildChats/{guildId}/messages/{messageId} {
      allow read, create: if request.auth != null && 
                          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.guild == guildId;
      allow update, delete: if request.auth != null && 
                            (request.auth.uid == resource.data.userId || 
                             (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
    }

    // Allow listing guild chat messages for guild members
    match /guildChats/{guildId} {
      allow read: if request.auth != null && 
                  exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.guild == guildId;
    }

    // Error logs - anyone can create, admins can read
    match /errorLogs/{logId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
                  exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Leaderboards - authenticated users can read, only admins/functions can write
    match /leaderboards/{leaderboardId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Deny all other documents by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}