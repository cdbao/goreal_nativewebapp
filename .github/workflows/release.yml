name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from tag
      id: get_version
      run: |
        echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        release_name: GoREAL ${{ steps.get_version.outputs.version }}
        body: |
          ## GoREAL Release ${{ steps.get_version.outputs.version }}
          
          ### What's Changed
          ${{ steps.changelog.outputs.changelog }}
          
          ### Docker Images
          - `docker pull ${{ secrets.DOCKER_USERNAME }}/goreal:${{ steps.get_version.outputs.version }}`
          - `docker pull ${{ secrets.DOCKER_USERNAME }}/goreal:latest`
          
          ### Installation
          ```bash
          # Clone the repository
          git clone https://github.com/${{ github.repository }}.git
          cd goreal-project
          
          # Quick start with Docker
          make quick-start
          ```
          
          ### Documentation
          - [Setup Guide](README.md)
          - [Development Guide](docs/DEVELOPMENT.md)
          - [API Documentation](docs/API.md)
          
          For support, please create an issue or check our documentation.
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  # Run full test suite
  test-release:
    runs-on: ubuntu-latest
    name: Test Release
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: goreal_password
          POSTGRES_USER: goreal_user
          POSTGRES_DB: goreal_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
        
    - name: Run comprehensive tests
      env:
        DATABASE_URL: postgresql://goreal_user:goreal_password@localhost:5432/goreal_test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        # Initialize test database
        python -c "from goreal.core.database import create_tables; create_tables()"
        
        # Run all tests
        pytest tests/ -v \
          --cov=goreal \
          --cov-report=xml \
          --cov-fail-under=85 \
          --maxfail=1

  # Build and push release Docker images
  docker-release:
    runs-on: ubuntu-latest
    name: Docker Release
    needs: [create-release, test-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from tag
      id: get_version
      run: |
        echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/goreal:${{ steps.get_version.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/goreal:latest
        labels: |
          org.opencontainers.image.title=GoREAL
          org.opencontainers.image.description=Roblox-integrated challenge management system
          org.opencontainers.image.version=${{ steps.get_version.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Build Python package
  build-package:
    runs-on: ubuntu-latest
    name: Build Python Package
    needs: [create-release, test-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: dist/
        asset_name: goreal-python-package.tar.gz
        asset_content_type: application/gzip

  # Deploy to staging (optional)
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [docker-release]
    if: contains(github.ref, 'v') && !contains(github.ref, '-')
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # For example, using kubectl, docker-compose, or deployment scripts
        
    - name: Health check
      run: |
        echo "Running health checks on staging deployment..."
        # Add health check commands here
        
    - name: Notify deployment
      if: always()
      run: |
        echo "Staging deployment completed"
        # Add notification logic (Slack, email, etc.)