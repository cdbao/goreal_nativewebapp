# {{project_title}}

{{project_description}}

## Features

- **RESTful API**: Built with Flask and modern Python practices
{% if use_jwt_auth %}- **Authentication**: JWT-based authentication system{% endif %}
- **Database**: {{database_type|title}} integration with SQLAlchemy
{% if use_redis %}- **Caching**: Redis-based caching layer{% endif %}
{% if use_celery %}- **Background Tasks**: Celery task queue for async operations{% endif %}
- **Testing**: Comprehensive test suite with pytest
- **Code Quality**: Black, flake8, mypy, and isort for code quality
- **Documentation**: Auto-generated API documentation
{% if use_docker %}- **Docker**: Containerized deployment ready{% endif %}
{% if use_monitoring %}- **Monitoring**: Prometheus metrics and Grafana dashboards{% endif %}

## Quick Start

### Prerequisites

- Python {{python_version}}+
- {{database_type|title}}
{% if use_redis %}- Redis{% endif %}
{% if use_docker %}- Docker and Docker Compose{% endif %}

### Development Setup

1. **Clone the repository**
   ```bash
   git clone https://github.com/{{github_username}}/{{project_name}}.git
   cd {{project_name}}
   ```

2. **Set up virtual environment**
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. **Install dependencies**
   ```bash
   pip install -r requirements-dev.txt
   ```

4. **Set up environment variables**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

5. **Initialize database**
   ```bash
   python -c "from {{project_name}}.core.database import create_tables; create_tables()"
   ```

6. **Run the application**
   ```bash
   flask --app {{project_name}}.api.app:create_app() run --debug
   ```

### API Endpoints

| Endpoint | Method | Description |
|----------|--------|-------------|
| `/health` | GET | Health check endpoint |
{% if use_jwt_auth %}| `/api/auth/login` | POST | User authentication |
| `/api/auth/refresh` | POST | Refresh access token |{% endif %}
| `/api/users` | GET | List users |
| `/api/users` | POST | Create user |
| `/api/users/{id}` | GET | Get user by ID |

### Testing

```bash
# Run all tests
pytest

# Run with coverage
pytest --cov={{project_name}}

# Run specific test types
pytest tests/unit/
pytest tests/integration/
```

### Code Quality

```bash
# Format code
black {{project_name}}/

# Lint code
flake8 {{project_name}}/

# Type checking
mypy {{project_name}}/

# Sort imports
isort {{project_name}}/
```

{% if use_docker %}## Docker Deployment

### Development

```bash
docker-compose up -d
```

### Production

```bash
docker-compose -f docker-compose.prod.yml up -d
```

The application will be available at:
- API: http://localhost:8000
{% if use_monitoring %}- Grafana: http://localhost:3000
- Prometheus: http://localhost:9090{% endif %}
{% endif %}

## Project Structure

```
{{project_name}}/
├── {{project_name}}/              # Main application package
│   ├── api/                    # Flask API
│   ├── core/                   # Core functionality
│   ├── models/                 # Data models
│   └── utils/                  # Utility functions
├── tests/                      # Test suite
├── docs/                       # Documentation
├── scripts/                    # Development scripts
{% if use_docker %}├── docker/                     # Docker configurations{% endif %}
└── requirements.txt            # Dependencies
```

## Configuration

Configuration is managed through environment variables:

```bash
# Database
DATABASE_URL={{database_type}}://user:pass@localhost/{{project_name}}

{% if use_redis %}# Redis
REDIS_URL=redis://localhost:6379/0
{% endif %}
{% if use_jwt_auth %}# JWT
JWT_SECRET_KEY=your-secret-key-here
JWT_ACCESS_TOKEN_EXPIRES=3600
{% endif %}
# Application
FLASK_ENV=development
SECRET_KEY=your-secret-key
```

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Run tests (`pytest`)
5. Commit your changes (`git commit -m 'Add amazing feature'`)
6. Push to the branch (`git push origin feature/amazing-feature`)
7. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Support

- **Documentation**: [docs/](docs/)
- **Issues**: [GitHub Issues](https://github.com/{{github_username}}/{{project_name}}/issues)
- **Author**: {{author_name}} ({{author_email}})

---

Generated from GoREAL Flask API Template