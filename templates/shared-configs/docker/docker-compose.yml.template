version: '3.8'

services:
  # {{project_title}} Application
{% if template_type == 'fullstack' %}
  # API Backend
  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-}
    container_name: {{project_name}}-api
    restart: unless-stopped
    ports:
      - "{{api_port|default(8000)}}:{{api_port|default(8000)}}"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=${DATABASE_URL:-{{database_type}}://{{project_name}}_user:{{project_name}}_pass@{{database_type}}:5432/{{project_name}}_db}
      {% if use_redis %}- REDIS_URL=${REDIS_URL:-redis://redis:6379/0}{% endif %}
      - SECRET_KEY=${SECRET_KEY:-development-secret-key}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./backend:/app
      - api-logs:/app/logs
    networks:
      - {{project_name}}-network
    depends_on:
      - {{database_type}}
      {% if use_redis %}- redis{% endif %}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{{api_port|default(8000)}}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard Frontend
  dashboard:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: {{project_name}}-dashboard
    restart: unless-stopped
    ports:
      - "{{dashboard_port|default(8501)}}:{{dashboard_port|default(8501)}}"
    environment:
      - API_BASE_URL=http://api:{{api_port|default(8000)}}
      - STREAMLIT_SERVER_PORT={{dashboard_port|default(8501)}}
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    volumes:
      - ./frontend:/app
    networks:
      - {{project_name}}-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{{dashboard_port|default(8501)}}"]
      interval: 30s
      timeout: 10s
      retries: 3

{% elif template_type == 'flask-api' %}
  # Flask API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-}
    container_name: {{project_name}}-api
    restart: unless-stopped
    ports:
      - "{{api_port|default(8000)}}:{{api_port|default(8000)}}"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=${DATABASE_URL:-{{database_type}}://{{project_name}}_user:{{project_name}}_pass@{{database_type}}:5432/{{project_name}}_db}
      {% if use_redis %}- REDIS_URL=${REDIS_URL:-redis://redis:6379/0}{% endif %}
      - SECRET_KEY=${SECRET_KEY:-development-secret-key}
      {% if use_jwt_auth %}- JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt-development-secret}{% endif %}
    volumes:
      - .:/app
      - api-logs:/app/logs
    networks:
      - {{project_name}}-network
    depends_on:
      - {{database_type}}
      {% if use_redis %}- redis{% endif %}
    command: flask --app {{project_name|replace('-', '_')}}.api.app:create_app() run --host=0.0.0.0 --port={{api_port|default(8000)}} --debug

{% elif template_type == 'streamlit-dashboard' %}
  # Streamlit Dashboard Application
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: {{project_name}}-dashboard
    restart: unless-stopped
    ports:
      - "{{dashboard_port|default(8501)}}:{{dashboard_port|default(8501)}}"
    environment:
      {% if data_source == 'database' %}- DATABASE_URL=${DATABASE_URL:-{{database_type}}://{{project_name}}_user:{{project_name}}_pass@{{database_type}}:5432/{{project_name}}_db}{% endif %}
      - STREAMLIT_SERVER_PORT={{dashboard_port|default(8501)}}
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
    volumes:
      - .:/app
      - dashboard-data:/app/data
    networks:
      - {{project_name}}-network
    {% if data_source == 'database' %}depends_on:
      - {{database_type}}{% endif %}
{% endif %}

{% if database_type == 'postgresql' %}
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: {{project_name}}-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB={{project_name}}_db
      - POSTGRES_USER={{project_name}}_user
      - POSTGRES_PASSWORD={{project_name}}_pass
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - {{project_name}}-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{project_name}}_user -d {{project_name}}_db"]
      interval: 30s
      timeout: 10s
      retries: 3

{% elif database_type == 'mysql' %}
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: {{project_name}}-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD={{project_name}}_root_pass
      - MYSQL_DATABASE={{project_name}}_db
      - MYSQL_USER={{project_name}}_user
      - MYSQL_PASSWORD={{project_name}}_pass
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - {{project_name}}-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u{{project_name}}_user", "-p{{project_name}}_pass"]
      interval: 30s
      timeout: 10s
      retries: 3
{% endif %}

{% if use_redis %}
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: {{project_name}}-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass {{project_name}}_redis_pass
    volumes:
      - redis-data:/data
    networks:
      - {{project_name}}-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
{% endif %}

{% if use_monitoring %}
  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: {{project_name}}-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - {{project_name}}-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: {{project_name}}-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD={{project_name}}_grafana_pass
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deploy/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - {{project_name}}-network
    depends_on:
      - prometheus
{% endif %}

volumes:
{% if template_type == 'fullstack' %}
  api-logs:
    driver: local
  dashboard-data:
    driver: local
{% elif template_type == 'flask-api' %}
  api-logs:
    driver: local
{% elif template_type == 'streamlit-dashboard' %}
  dashboard-data:
    driver: local
{% endif %}
{% if database_type == 'postgresql' %}
  postgres-data:
    driver: local
{% elif database_type == 'mysql' %}
  mysql-data:
    driver: local
{% endif %}
{% if use_redis %}
  redis-data:
    driver: local
{% endif %}
{% if use_monitoring %}
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
{% endif %}

networks:
  {{project_name}}-network:
    driver: bridge
    name: {{project_name}}-network