name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Code formatting with Black
        run: black --check --diff {{project_name|replace('-', '_')}}/ tests/

      - name: Import sorting with isort
        run: isort --check-only --diff {{project_name|replace('-', '_')}}/ tests/

      - name: Linting with flake8
        run: flake8 {{project_name|replace('-', '_')}}/ tests/

      - name: Type checking with mypy
        run: mypy {{project_name|replace('-', '_')}}/ --ignore-missing-imports

      - name: Security analysis with bandit
        run: bandit -r {{project_name|replace('-', '_')}}/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      {% if use_redis %}redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379{% endif %}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          {% if use_redis %}REDIS_URL: redis://localhost:6379/0{% endif %}
          SECRET_KEY: test-secret-key
          {% if use_jwt_auth %}JWT_SECRET_KEY: test-jwt-secret{% endif %}
        run: |
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          {% if use_redis %}echo "REDIS_URL=$REDIS_URL" >> $GITHUB_ENV{% endif %}
          echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV
          {% if use_jwt_auth %}echo "JWT_SECRET_KEY=$JWT_SECRET_KEY" >> $GITHUB_ENV{% endif %}

      - name: Run tests
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          {% if use_redis %}REDIS_URL: ${{ env.REDIS_URL }}{% endif %}
          SECRET_KEY: ${{ env.SECRET_KEY }}
          {% if use_jwt_auth %}JWT_SECRET_KEY: ${{ env.JWT_SECRET_KEY }}{% endif %}
        run: |
          pytest tests/ -v --cov={{project_name|replace('-', '_')}} --cov-report=xml --cov-report=html

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install safety
        run: pip install safety

      - name: Run safety check
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload safety report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: safety-report
          path: safety-report.json

  {% if use_docker %}
  # Docker Build and Scan
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: false
          tags: {{project_name}}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ github.sha }}
            VCS_REF=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: {{project_name}}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  {% endif %}

  # Build and Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here

      {% if publish_to_pypi %}
      - name: Publish to PyPI
        if: github.event_name == 'release'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload dist/*
      {% endif %}

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, test, security, build]
    if: always()
    steps:
      - name: Notify success
        if: needs.quality.result == 'success' && needs.test.result == 'success'
        run: |
          echo "✅ All checks passed successfully!"

      - name: Notify failure
        if: needs.quality.result == 'failure' || needs.test.result == 'failure'
        run: |
          echo "❌ Some checks failed. Please review the results."
          exit 1